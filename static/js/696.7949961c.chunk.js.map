{"version":3,"file":"static/js/696.7949961c.chunk.js","mappings":"+PAEaA,EAAOC,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,0FAOhBC,EAAOH,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,gGAOhBG,EAAYL,EAAAA,GAAAA,IAAUM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,+DAMtBK,EAAQP,EAAAA,GAAAA,IAAUQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,gCAIlBO,EAAOT,EAAAA,GAAAA,EAAQU,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,iCAIfS,EAAOX,EAAAA,GAAAA,EAAQY,IAAAA,GAAAV,EAAAA,EAAAA,GAAA,sD,6DC6B5B,EAnDa,WACX,IAAAW,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAA0BL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA/BE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GACdG,GAAYC,EAAAA,EAAAA,MAAZD,QAkBR,OAhBAE,EAAAA,EAAAA,YAAU,WACHF,IAGLG,EAAAA,EAAAA,GAAU,OAAQH,GACfI,MAAK,SAAAC,GAAe,IAAZX,EAAIW,EAAJX,KACFA,EAAKY,QAIVX,EAAQD,GACRK,EAAS,KAJPA,EAAS,UAKb,IACCQ,OAAM,kBAAMR,EAAS,oBAAoB,GAC9C,GAAG,CAACC,KAGFQ,EAAAA,EAAAA,KAAA,OAAAC,SACa,KAAVX,GACCU,EAAAA,EAAAA,KAAA,OAAAC,UACED,EAAAA,EAAAA,KAAChC,EAAI,CAAAiC,SACFf,EAAKgB,KAAI,SAAAC,GAAK,OACbC,EAAAA,EAAAA,MAAChC,EAAI,CAAA6B,SAAA,EACHD,EAAAA,EAAAA,KAAC1B,EAAS,CAAA2B,UACRD,EAAAA,EAAAA,KAACxB,EAAK,CACJ6B,IACEF,EAAMG,aAAY,GAAAC,OAjCzB,8BAkCoB,QAAAA,OAAOJ,EAAMG,cACtBE,EAENC,IAAKN,EAAMO,UAGfV,EAAAA,EAAAA,KAACpB,EAAI,CAAAqB,SAAEE,EAAMO,QACbN,EAAAA,EAAAA,MAAC1B,EAAI,CAAAuB,SAAA,CAAC,MAAIE,EAAMQ,eAZPR,EAAMS,GAaV,QAKbtB,GAIR,C,kGCvDMuB,EAAM,+BACNC,EAAM,mCAEL,SAAenB,EAASoB,EAAAC,EAAAC,GAAA,OAAAC,EAAAC,MAAC,KAADC,UAAA,CAoB9B,SAAAF,IAAA,OAAAA,GAAAG,EAAAA,EAAAA,GAAAC,IAAAA,MApBM,SAAAC,EAAyBC,EAAMZ,EAAIa,GAAK,IAAAC,EAAAC,EAAAC,EAAA,OAAAN,IAAAA,MAAA,SAAAO,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAY3C,OAXIL,EAAW,CACflC,QAAQ,UAADe,OAAYK,GACnB1B,KAAK,UAADqB,OAAYK,EAAE,YAClBoB,QAAQ,UAADzB,OAAYK,EAAE,YACrBqB,OAAQ,gBACRC,SAAU,uBAGNP,EAAe,IAAIQ,gBAAgB,CACvCV,MAAOA,EACPW,eAAe,IACfP,EAAAE,KAAA,EAEoBM,EAAAA,EAAAA,IAAU,GAAD9B,OAC1BM,GAAGN,OAAGmB,EAASF,GAAK,aAAAjB,OAAYO,EAAG,KAAAP,OAC3B,WAATiB,EAAoBG,EAAe,KAErC,KAAD,EAJY,OAAPC,EAAOC,EAAAS,KAAAT,EAAAU,OAAA,SAKNX,EAAQY,MAAI,wBAAAX,EAAAY,OAAA,GAAAlB,EAAA,MACpBJ,MAAA,KAAAC,UAAA,C","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/themoviedb-api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 10px;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 120px;\n`;\n\nexport const PhotoWrap = styled.div`\n  width: 120px;\n  height: 200px;\n  display: flex;\n`;\n\nexport const Photo = styled.img`\n  object-fit: cover;\n`;\n\nexport const Info = styled.p`\n  text-align: center;\n`;\n\nexport const Name = styled.p`\n  text-align: center;\n  font-weight: 500;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchData } from 'services/themoviedb-api';\nimport { Info, Item, List, Name, Photo, PhotoWrap } from './Cast.styled';\nimport imgActor from 'images/actor.png';\n\nconst POSTER = 'https://image.tmdb.org/t/p/';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState('');\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n    fetchData('cast', movieId)\n      .then(({ cast }) => {\n        if (!cast.length) {\n          setError('No cast');\n          return;\n        }\n        setCast(cast);\n        setError('');\n      })\n      .catch(() => setError('Please, try again'));\n  }, [movieId]);\n\n  return (\n    <div>\n      {error === '' ? (\n        <div>\n          <List>\n            {cast.map(actor => (\n              <Item key={actor.id}>\n                <PhotoWrap>\n                  <Photo\n                    src={\n                      actor.profile_path\n                        ? `${POSTER}w500${actor.profile_path}`\n                        : imgActor\n                    }\n                    alt={actor.name}\n                  />\n                </PhotoWrap>\n                <Name>{actor.name}</Name>\n                <Info>as {actor.character}</Info>\n              </Item>\n            ))}\n          </List>\n        </div>\n      ) : (\n        error\n      )}\n    </div>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst URL = 'https://api.themoviedb.org/3';\nconst KEY = '52fe94b8e19a93eac61192960d23427b';\n\nexport async function fetchData(type, id, query) {\n  const endpoint = {\n    movieId: `/movie/${id}`,\n    cast: `/movie/${id}/credits`,\n    reviews: `/movie/${id}/reviews`,\n    search: '/search/movie',\n    trending: '/trending/movie/day',\n  };\n\n  const searchParams = new URLSearchParams({\n    query: query,\n    include_adult: false,\n  });\n\n  const request = await axios.get(\n    `${URL}${endpoint[type]}?api_key=${KEY}&${\n      type === 'search' ? searchParams : ''\n    }`\n  );\n  return request.data;\n}\n"],"names":["List","styled","_templateObject","_taggedTemplateLiteral","Item","_templateObject2","PhotoWrap","_templateObject3","Photo","_templateObject4","Info","_templateObject5","Name","_templateObject6","_useState","useState","_useState2","_slicedToArray","cast","setCast","_useState3","_useState4","error","setError","movieId","useParams","useEffect","fetchData","then","_ref","length","catch","_jsx","children","map","actor","_jsxs","src","profile_path","concat","imgActor","alt","name","character","id","URL","KEY","_x","_x2","_x3","_fetchData","apply","arguments","_asyncToGenerator","_regeneratorRuntime","_callee","type","query","endpoint","searchParams","request","_context","prev","next","reviews","search","trending","URLSearchParams","include_adult","axios","sent","abrupt","data","stop"],"sourceRoot":""}