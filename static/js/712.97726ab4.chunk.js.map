{"version":3,"file":"static/js/712.97726ab4.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","components/Searchbar/Searchbar.styled.jsx","components/Searchbar/Searchbar.jsx","pages/Movies.jsx","services/themoviedb-api.js"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 20px;\n  margin: 0 500px;\n`;\n\nexport const LinkItem = styled(Link)`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 200px;\n  transition: transform 250ms ease-in-out;\n  &:hover {\n    transform: scale(1.05);\n  }\n`;\n\nexport const ImgWrap = styled.div`\n  display: flex;\n  align-content: center;\n  margin: 0 auto;\n  width: 200px;\n  height: 280px;\n`;\n\nexport const Image = styled.img`\n  border-radius: 4px;\n  width: 100%;\n`;\n\nexport const Title = styled.h3`\n  text-align: center;\n`;\n\nexport const Rating = styled.div`\n  position: absolute;\n  top: 4px;\n  right: 4px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  border: 1px solid white;\n  background-color: ${({ $color }) => $color};\n  color: white;\n`;\n","import { useLocation } from 'react-router-dom';\nimport {\n  LinkItem,\n  Image,\n  ImgWrap,\n  List,\n  Rating,\n  Title,\n} from './MoviesList.styled';\nimport filmIcon from 'images/film_icon.png';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n  const POSTERS_URL = 'https://image.tmdb.org/t/p/';\n\n  const dateOptions = {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n  };\n\n  return (\n    <List>\n      {movies.map(movie => (\n        <li key={movie.id}>\n          <LinkItem\n            to={\n              location.pathname === '/' ? `movies/${movie.id}` : `${movie.id}`\n            }\n            state={{ from: location }}\n          >\n            <ImgWrap>\n              <Image\n                src={\n                  movie.poster_path\n                    ? `${POSTERS_URL}w200${movie.poster_path}`\n                    : filmIcon\n                }\n                alt={movie.title}\n              />\n            </ImgWrap>\n            <Title>{movie.title}</Title>\n            <p>\n              {movie.release_date\n                ? new Date(movie.release_date).toLocaleDateString(\n                    'en-US',\n                    dateOptions\n                  )\n                : ''}\n            </p>\n            <Rating\n              $color={ratingColorDetect(Math.round(movie.vote_average * 10))}\n            >\n              {movie.vote_average === 0\n                ? 'NR'\n                : `${Math.round(movie.vote_average * 10)}%`}\n            </Rating>\n          </LinkItem>\n        </li>\n      ))}\n    </List>\n  );\n};\n\nexport default MoviesList;\n\nfunction ratingColorDetect(number) {\n  let color;\n  if (!number) {\n    color = 'grey';\n  } else if (number < 50) {\n    color = 'red';\n  } else if (number < 70) {\n    color = 'orange';\n  } else if (number >= 70) {\n    color = 'green';\n  }\n  return color;\n}\n","import { Field, Form } from 'formik';\nimport styled from 'styled-components';\n\nexport const SearchForm = styled(Form)`\n  margin: 0 auto;\n  display: flex;\n  width: 40%;\n  border: 1px solid #87ceeb;\n  border-top: none;\n`;\n\nexport const SearchFormButton = styled.button`\n  opacity: 0.5;\n  transition: opacity 250ms linear;\n  cursor: pointer;\n  background-color: #87ceeb;\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const SearchInput = styled(Field)`\n  display: inline-block;\n  width: 100%;\n  font-size: 24px;\n  border: none;\n`;\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport { PiFilmReelLight } from 'react-icons/pi';\nimport { SearchForm, SearchFormButton, SearchInput } from './Searchbar.styled';\n\nexport const Searchbar = () => {\n  const [query, setQuery] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [error, setError] = useState('');\n\n  const handleChange = ({ target: { value } }) => {\n    if (!value) setSearchParams({});\n    setQuery(value);\n  };\n\n  const handleSearch = () => {\n    if (query === '') {\n      setError('Please, enter request');\n      return;\n    }\n    setSearchParams({ query: query });\n    setError('');\n  };\n\n  useEffect(() => {\n    const value = searchParams.get('query');\n    if (value) {\n      setQuery(value);\n    }\n  }, [searchParams]);\n\n  return (\n    <>\n      <Formik initialValues={{ searchQuery: '' }} onSubmit={handleSearch}>\n        <SearchForm>\n          <SearchInput\n            value={query}\n            name=\"searchQuery\"\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Enter the title\"\n            onChange={handleChange}\n          />\n\n          <SearchFormButton type=\"submit\">\n            <PiFilmReelLight />\n            <p>Search</p>\n          </SearchFormButton>\n        </SearchForm>\n      </Formik>\n\n      {error === '' ? '' : error}\n    </>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchData } from 'services/themoviedb-api';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport { Searchbar } from 'components/Searchbar/Searchbar';\n\nconst Movies = () => {\n  const [searchParams] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const query = searchParams.get('query');\n    if (!query) return;\n\n    fetchData('search', 0, query)\n      .then(({ results }) => {\n        if (!results.length) {\n          setError(`No movie with title ${query.toUpperCase()}`);\n          return;\n        }\n        setMovies(results);\n        setError('');\n      })\n      .catch(() => setError('Please, try again'));\n  }, [searchParams]);\n\n  return (\n    <div>\n      <Searchbar />\n      {error === '' ? <MoviesList movies={movies} /> : error}\n    </div>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst URL = 'https://api.themoviedb.org/3';\nconst KEY = '52fe94b8e19a93eac61192960d23427b';\n\nexport async function fetchData(type, id, query) {\n  const endpoint = {\n    movieId: `/movie/${id}`,\n    cast: `/movie/${id}/credits`,\n    reviews: `/movie/${id}/reviews`,\n    search: '/search/movie',\n    trending: '/trending/movie/day',\n  };\n\n  const searchParams = new URLSearchParams({\n    query: query,\n    include_adult: false,\n  });\n\n  const request = await axios.get(\n    `${URL}${endpoint[type]}?api_key=${KEY}&${\n      type === 'search' ? searchParams : ''\n    }`\n  );\n  return request.data;\n}\n"],"names":["List","styled","_templateObject","_taggedTemplateLiteral","LinkItem","Link","_templateObject2","ImgWrap","_templateObject3","Image","_templateObject4","Title","_templateObject5","Rating","_templateObject6","_ref","$color","movies","location","useLocation","dateOptions","year","month","day","_jsx","children","map","movie","_jsxs","to","pathname","concat","id","state","from","src","poster_path","filmIcon","alt","title","release_date","Date","toLocaleDateString","ratingColorDetect","Math","round","vote_average","number","color","SearchForm","Form","SearchFormButton","SearchInput","Field","Searchbar","_useState","useState","_useState2","_slicedToArray","query","setQuery","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","_useState3","_useState4","error","setError","useEffect","value","get","_Fragment","Formik","initialValues","searchQuery","onSubmit","name","type","autoComplete","autoFocus","placeholder","onChange","target","PiFilmReelLight","setMovies","fetchData","then","results","length","toUpperCase","catch","MoviesList","URL","KEY","_x","_x2","_x3","_fetchData","apply","arguments","_asyncToGenerator","_regeneratorRuntime","_callee","endpoint","request","_context","prev","next","movieId","cast","reviews","search","trending","URLSearchParams","include_adult","axios","sent","abrupt","data","stop"],"sourceRoot":""}